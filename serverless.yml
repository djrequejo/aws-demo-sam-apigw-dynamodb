service: demo-sam-apigw-dynamodb

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action: "dynamodb:*"
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tablename}
        - Effect: Allow
          Action: "s3:*"
          Resource: arn:aws:s3:::${self:custom.bucketname}/*
  environment:
    BUCKET_NAME: ${self:custom.bucketname}
    REGION: ${aws:region}

plugins:
  - serverless-dynamodb
  - serverless-offline

package:
  individually: true
  patterns:
    - "!**"

functions:
  get-users:
    handler: src/get-users/handler.getUsers
    package:
      patterns:
        - "src/get-users/handler.js"
    events:
      - http:
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
  create-user:
    handler: src/create-user/handler.createUser
    package:
      patterns:
        - "src/create-user/handler.js"
    events:
      - http:
          path: users
          method: POST
          request:
            schemas:
              application/json: ${file(./src/schemas/user-schema.json)}
  update-user:
    handler: src/update-user/handler.updateUser
    package:
      patterns:
        - "src/update-user/handler.js"
    events:
      - http:
          path: users/{id}
          method: PATCH
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(./src/schemas/user-schema.json)}
  delete-user:
    handler: src/delete-user/handler.deleteUser
    runtime: python3.11
    package:
      patterns:
        - "src/delete-user/handler.py"
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
  sing-url:
    handler: src/sing-url/handler.signedS3URL
    package:
      patterns:
        - "src/sing-url/handler.js"
    events:
      - http:
          path: signedurl
          method: GET
          request:
            parameters:
              querystrings:
                filename: true
  thumbnail-generator:
    handler: src/thumbnail/handler.thumbnailGenerator
    layers:
      - { Ref: BaseLambdaLayer }
    package:
      patterns:
        - "src/thumbnail/handler.js"
    events:
      - s3:
          bucket: ${self:custom.bucketname}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: upload/

custom:
  servicename: demo-sam-apigw-dynamodb
  tablename: ${self:custom.servicename}-table
  bucketname: djrequejo-dev-${self:custom.servicename}-bucket-111
  serverless-dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

layers:
  base:
    name: thumbnail-generator-dependencies
    compatibleRuntimes:
      - nodejs18.x
    compatibleArchitectures:
      - x86_64
    package:
      artifact: app/nodejs.zip

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tablename}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:custom.bucketname}
        PublicAccessBlockConfiguration:
          BlockPublicPolicy: false
          RestrictPublicBuckets: false
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref S3Bucket
                  - /*
